#!/usr/bin/env bash

						################
						#    ISFREE    #
						################

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the second version of the GNU General Public
#  License as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.


### DESCRIPTION ###

# This script is mainly intended to find out whether there is non-free/libre
#+ software in your Arch Linux machine, and, if any, to suggest a free
#+ alternative. It uses Parabola's blacklists to perform the tests.
#+ Since version 0.8.7 I added an option (-i) to list all the
#+ installed systemd packages (supporting the init freedom campaing).

# As a side note: I do not use here Parabola's
#+ your-initfreedom-blacklist, since it is just a fixed, and quite
#+ incomplete, list of packages names. By contrast, I list systemd
#+ packages dynamically, that is, parsing the local pacman
#+ database looking for packages deps, and not their names.

# NOTE: GitHub (https://github.com/duckinator/check-free.git) has a script
#+ called 'check-free' (written by Nick Marwell (duckinator)), which is
#+ intended to do the same thing this script does. However, I'm not sure
#+ whether it works so fine, since it only recognizes -provided my script
#+ does the job well- only 6 of MY 33 non-free packages.
#+ GitHub also hosts a python script called absolutely-proprietary,
#+ developed by vmavromatis, which does the same thing as my script:
#+ checking Arch Linux installed packages against Parabola's blacklists.
#+ See https://github.com/vmavromatis/absolutely-proprietary


### COLORS ###
# No color by default

white=""
red=""
yellow=""
green=""
cyan=""
blue=""
magenta=""
d_yellow=""
bold=""
nc=""

### PROGRAM DATA ###

ME="IsFree"
VERSION="0.9.1"
DATE="Jan 28, 2021"
AUTHOR="L. Abramovich"
LICENSE="GPL2"
WEBSITE="https://github.com/leo-arch/isfree"

### EXIT CODES ###

SUCCESS=0
ERROR=1

### URLS ###

OFFICIAL_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/blacklist.txt"
AUR_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/aur-blacklist.txt"
PRIVACY_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/your-privacy-blacklist.txt"
# EMULATOR_BLACKLIST="https://git.parabola.nu/blacklist.git/plain/your-freedom_emu-blacklist.txt"

# A whitelist of GNU approved (free) software could be found here:
#+ http://www.gnu.org/software/

# A list of free software ordered by categories is available at:
#+ http://directory.fsf.org/wiki/Main_Page

LIBRE_REPO="http://mirror.fsf.org/parabola/libre/os/$(uname -m)/libre.db"

# NOTE: About the blacklists syntax:
# original-package:[libre-replacement]:[ref]:[id]:short description, where
#+ something within [] is optional.

# Speed up the script by not using unicode
LC_ALL=C
LANG=C


					#############################
					#   FUNCTIONS DEFINITIONS   #
					#############################

################################

echoerr ()
{
	echo -e "$@" >&2
}

################################

show_help ()
{
	echo -e "$ME is fundamentally aimed to find out whether there is \
non-free/libre software installed in your Arch Linux system. When non-free \
software is found, $ME will suggest a free alternative (taken from \
Parabola Linux libre repo). If the libre repo is locally enabled, it will \
show the package version as well. Secondly, $ME can also check your \
system for systemd and systemd dependencies, supporting thus the so-called \
'init freedom'.
Exception made of the init checks, all the the tests are based on \
Parabola's blacklists, which can be found in the following URL's:
- https://git.parabola.nu/blacklist.git/plain/blacklist.txt (blacklisted \
official Arch packages)
- https://git.parabola.nu/blacklist.git/plain/aur-blacklist.txt \
(AUR blacklisted packages)
- https://git.parabola.nu/blacklist.git/plain/your-privacy-blacklist.txt \
(privacy risking packages).
\nUsage: $ME [OPTION]... [PKG] [REPO]
-a\t\tscan your system for non-free AUR packages
-c\t\tenable colored output
-d\t\tlist systemd packages provided by your enabled repositories
-f\t\tprint an extract from 'What is Free Software?', by Richard Stallman
-h\t\tshow this help and exit
-i\t\tlist installed packages directly depending on systemd (check your \
init freedom)
-l\t\tlist all the official Arch Linux non-free packages
-m\t\tlist all the AUR non-free packages
-n\t\tscan your system for non-free native packages
-p\t\tscan the system for software that might be compromizing your privacy
-r [REPO]\tcheck an official Arch Linux repo for non-free packages
-s [PKG]\tcheck an individual package against Parabola's blacklist
-t\t\tuse Parabola's full blacklist (see note below)
-v\t\tshow program version
-x\t\tlist all the privacy threatening software
\nNOTE: By default, $ME won't list packages considered non-free by \
Parabola's blacklist due to technical or branding issues (like pacman(!), \
systemd, filesystem, or grub), simply because these packages are by \
themselves free according to RMS definition of free-software \
(see the -f option). To use Parabola's full blacklist use the -t option."
}

################################

show_version ()
{
	echo -e "$ME $VERSION ($DATE), by $AUTHOR
License: $LICENSE
Website: $WEBSITE"
}

################################

free_soft ()
{
	echo -e "Excerpt from $nc${bold}'What is Free Software?'$nc (by Richard \
Stallman)
Source: https://www.gnu.org/philosophy/free-sw.html\n
${cyan}\"Free software\" means software that respects users' freedom and \
community. Roughly, it means that the users have the freedom to run, copy, \
distribute, study, change and improve the software${nc}. Thus, ${cyan}\"free \
software\" is a matter of liberty, not price${nc}. To understand the \
concept, you should think of ${cyan}\"free\" as in \"free speech\", not as \
in \"free beer\"${nc}. We sometimes call it ${cyan}\"libre software\"${nc}, \
borrowing the French or Spanish word for \"free\" as in freedom, to show  \
we do not mean the software is gratis. We campaign for these freedoms \
because everyone deserves them. With these freedoms, the users \
(both individually and collectively) control the program and what it does \
for them.${cyan} When users don't control the program, we call it \
a \"nonfree\" or proprietary program. The nonfree program controls the \
users, and the developer controls the program; this makes the program an \
instrument of unjust power${nc}.
A program is free software if the program's users have the $nc${bold}four \
essential freedoms:$nc

${cyan}-The freedom to run the program as you wish, for any purpose \
(freedom 0).
-The freedom to study how the program works, and change it so it does \
your computing as you wish (freedom 1). Access to the source code is a \
precondition for this.
-The freedom to redistribute copies so you can help your neighbor \
(freedom 2).
-The freedom to distribute copies of your modified versions to others \
(freedom 3). By doing this you can give the whole community a chance \
to benefit from your changes. Access to the source code is a precondition \
for this.$nc

A program is free software if it gives users adequately all of these \
freedoms. Otherwise, it is nonfree. While we can distinguish various \
nonfree distribution schemes in terms of how far they fall short of \
being free, we consider them all equally unethical (...)\n"
}

################################

get_blacklist ()
{
	if [[ -f "$tmp_file" ]]; then
		# If the blacklist file exists and it was last modified one
		#+ day ago or less, do nothing
		[[ $(($(/usr/bin/date "+%s") -  \
		$(/usr/bin/stat -c "%Y" -- "$tmp_file"))) \
		-le 86400 ]] &&	return
	fi

	if ! [[ "$(type -P /usr/bin/curl)" ]]; then
		echoerr "${ME,,}: 'curl': Command not found"
		exit $ERROR
	fi

	case $1 in

		aur)
			echo -ne "$blue::$nc$bold Downloading Parabola's AUR" \
					 "blacklist...$nc "
			/usr/bin/curl -s -- "$AUR_BLACKLIST" | /usr/bin/sed 's/  //g' \
			| /usr/bin/grep -v ^'#' | /usr/bin/sudo -u "$user" \
			/usr/bin/tee -- "$tmp_file" 1>/dev/null || exit $ERROR
		;;

		privacy)
			echo -ne "$blue::$nc$bold Downloading Parabola's privacy" \
					 "blacklist...$nc "
			/usr/bin/curl -s -- "$PRIVACY_BLACKLIST" \
			| /usr/bin/sed 's/  //g' | /usr/bin/grep -v ^'#' \
			| /usr/bin/sudo -u "$user" /usr/bin/tee -- \
			"$tmp_file" 1>/dev/null || exit $ERROR
		;;

		*)
			echo -ne "$blue::$nc$bold Downloading Parabola's" \
					 "blacklist...$nc "
			/usr/bin/curl -s -- "$OFFICIAL_BLACKLIST" \
			| /usr/bin/sed 's/  //g' | /usr/bin/grep -v ^'#' \
			| /usr/bin/sudo -u "$user" /usr/bin/tee -- \
			"$tmp_file" 1>/dev/null || exit $ERROR

			# Add the AUR blacklist too in case of packages installed
			#+ from some unofficial repo
			/usr/bin/curl -s -- "$AUR_BLACKLIST" | /usr/bin/sed 's/  //g' \
			| /usr/bin/grep -v ^'#' | /usr/bin/sudo -u "$user" \
			/usr/bin/tee -a -- "$tmp_file" 1>/dev/null || exit $ERROR
		;;
	esac

	echo -e "${green}OK$nc"
}

################################

parabola_repo_download ()
{
	if [[ -f "/tmp/libre_repo_pkgs" ]]; then
		# If the pkgs list file exists and it was last modified one
		#+ day ago or less, do nothing
		[[ $(($(/usr/bin/date "+%s") -  \
		$(/usr/bin/stat -c "%Y" /tmp/libre_repo_pkgs))) \
		-le 86400 ]] &&	return
	fi

	if /usr/bin/grep -q "^\[libre\]" /etc/pacman.conf; then

		echo -ne "$blue::$nc$bold Getting packages from [libre]" \
				 "repo...$nc "

		/usr/bin/pacman -Sl libre | /usr/bin/awk '{print $2"-"$3}' \
		| /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/libre_repo_pkgs 1>/dev/null || exit $ERROR

		echo -e "${green}OK$nc"

		return $SUCCESS
	fi

	echo -ne "$blue::$nc$bold Downloading Parabola's repository" \
			 "database...$nc "

	if ! [[ "$(type -P /usr/bin/wget)" ]]; then
		echoerr "\n${ME,,}: 'wget': Command not found"
		exit $ERROR
	fi

	/usr/bin/wget -qP /tmp -- "$LIBRE_REPO" || exit $ERROR

	if [[ -f "/tmp/libre.db" ]]; then
		echo -e "${green}OK$nc"
	else
		echoerr "${red}[-]$nc Error downloading file"
		exit $ERROR
	fi

	if ! [[ -d "/tmp/libre" ]]; then
		/usr/bin/mkdir -p /tmp/libre || exit $ERROR
	fi

	/usr/bin/tar xvfz /tmp/libre.db -C /tmp/libre 1>/dev/null \
	|| exit $ERROR

	/usr/bin/ls /tmp/libre | /usr/bin/sudo -u "$user" \
	/usr/bin/tee /tmp/libre_repo_pkgs 1>/dev/null || exit $ERROR
}

################################

blacklist_line ()
{
	local pack="$1" counter="$2" bl_line=""

	bl_line="$(/usr/bin/grep "^$pack:" -- "$tmp_file")"
#	bl_line="webkit2gtk:webkit2gtk::: depends of geoclue2"

#	if [[ $bl_line == *"depends"* ]]; then
#		local pkg_dep="$(echo "$bl_line" \
#		| grep -o "depends".* | cut -d" " -f3)"
#		if [[ $bl_line == *"$pkg_dep" ]]; then
#			if [[ -z $pkg_dep || $(ls -d /var/lib/pacman/local/"$pkg_dep"* 2>/dev/null) ]]; then
#				:
#			else
#				return -1
#			fi
#		fi
#	fi

	desc="$(echo "$bl_line" | cut -d":" -f 5-10)"

	case "$desc" in

		*\[technical\]*|*\[branding\]*)
			echo -ne "$white$counter$nc) $green$pack: $nc" \
			&& (( technical++ ))
		;;

		*\[nonfree\]*)
			echo -ne "$white$counter$nc) $red$pack: $nc" \
			&& (( nonfree++ ))
		;;

		*\[semifree\]*|*\[uses-nonfree\]*)
			echo -ne "$white$counter$nc) $yellow$pack: $nc" \
			&& (( semifree++ ))
		;;

		*\[FIXME*)
			echo -ne "$white$counter$nc) $white$pack: $nc" \
			&& (( fix_doc++ ))
		;;

		"")
			echo -ne "$white$counter$nc) $blue$pack: $nc\n" \
			&& (( no_desc++ ))
		;;

		*)
			echo -ne "$white$counter$nc) $cyan$pack: $nc" \
			&& (( no_tag++ ))
		;;
	esac

	# Get package description
	if [[ $nocolor -eq 0 ]]; then
		export GREP_COLORS="mt=1;36"

		if ! echo "$desc" | /usr/bin/grep --color=always -- "\[technical\]\|\[branding\]\|\[nonfree\]\|\[semifree\]\|\[uses-nonfree\]\|\[recommends-nonfree\]\|\[FIXME description\]\|\[FIXME package\]"; then
			echo "$desc"
		fi

		unset GREP_COLORS

	else
		echo "$desc"
	fi
}

extra_alternatives ()
{
	local alternative_b=""
	declare -r pkg="$1"

	case $pkg in

		firefox|"firefox-dev"*|"firefox-i18n"*\
		|"firefox-beta"*|opera|chromium|"chromium-browser"*\
		|"google-chrome"*|vivaldi|falkon|seamonkey)
			alternative_b="icecat, iceweasel"
		;;

		"virtualbox"*|vmware-workstation) alternative_b="qemu" ;;

		"acroread"*|foxitreader) alternative_b="mupdf-gl" ;;

		dropbox) alternative_b="nextcloud" ;;

		atom|electron) alternative_b="eclipse, geany" ;;

		"nvidia"*) alternative_b="xf86-video-nouveau" ;;

		wps-office) alternative_b="libreoffice-fresh" ;;

		acetoneiso2) alternative_b="brasero, graveman, simpleburn" ;;

		clonezilla) alternative_b="mondo, partclone, partimage" ;;

		krusader) alternative_b="mc (from [libre])" ;;

	esac

	echo "$alternative_b"
}

################################

free_alternative ()
{
	local pack="$1" alternative=""

	# Get the alternative package in the blacklist, if any
	alternative="$(/usr/bin/grep "^$pack:" -- "$tmp_file" \
	| /usr/bin/cut -d ":" -f2)"

	if [[ -z $alternative ]]; then
		alternative="$(extra_alternatives "$pack")"
	fi

	# If an alternative pkg was found, check the libre repo to find
	#+ the current version of this pkg
	if [[ -n $alternative ]]; then
		(( replacement_counter++ ))

		alternative_version="$(/usr/bin/grep -Ee \
		"^$alternative-[0-9]" /tmp/libre_repo_pkgs)"

		if [[ -n $alternative_version ]]; then
			echo -e "   Free alternative: $alternative_version"
		else
			echo -e "   Free alternative: $alternative"
		fi

	else
		no_alternative[${#no_alternative[*]}]="$pack"
	fi
}

################################

color_codes ()
{
	local nonfree=$1 semifree=$2 technical=$3 fix_doc=$4 no_desc=$5 no_tag=$6

	echo -e "\n${bold}Color codes:"

	if [[ $nonfree -gt 0 ]]; then
		echo -e "${red}Red:$nc Totally non-free," \
				"closed source code ($nonfree)."
	fi

	if [[ $semifree -gt 0 ]]; then
		echo -e "${yellow}Yellow:$nc Contains or" \
				"depends on non-free software ($semifree)."
	fi

	if [[ $technical -gt 0 ]]; then
		echo -e "${green}Green:$nc It IS by" \
				"itself free, but has some technical," \
				"branding or trademarking issue, or" \
				"simply points somehow to non-free" \
				"software ($technical)."
	fi

	if [[ $fix_doc -gt 0 ]]; then
		echo -e "${white}White:$nc Package" \
				"description needs to be corrected ($fix_doc)."
	fi

	if [[ $no_tag -gt 0 ]]; then
		echo -e "${cyan}Cyan:$nc No" \
				"tag in the descrition of this package in" \
				"Parabola's blacklist ($no_tag)."
	fi

	if [[ $no_desc -gt 0 ]]; then
		echo -e "${blue}Blue:$nc No" \
				"description for this package in" \
				"Parabola's blacklist ($no_desc)."
	fi
}

################################

check_native ()
{
	# NOTE: native does not mean official, but installed from a repo
	#+ enabled in pacman.conf (be it official or not)

	tmp_file="/tmp/parabola_bl_official_full"

	get_blacklist

	if [[ $full_bl -eq 0 ]]; then
		# By default, remove all branding and merely technical
		#+ non-free packs
		/usr/bin/grep ":\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]\|^[^[]*$" \
		-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/parabola_bl_official 1>/dev/null || exit $ERROR

		tmp_file="/tmp/parabola_bl_official"
	fi

	# NOTE: the "^[^[]*$" condition in grep is aimed to keep lines
	#+ having no square brackets at all
	parabola_repo_download

	echo -ne "$blue::$nc$bold Getting installed native packages...$nc "

	# Store installed native pkgs excluding parabola, hyperbola, and
	#+ GNU ones
	mapfile -t pkgs < <(/usr/bin/pacman -Qn | /usr/bin/awk \
	'!/\.par|\.hyperbola|_gnu/{print $1}')

	echo -e "${green}OK$nc"

	echo -e "Non-free installed native packages:$nc\n"

	local counter=0

	fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0; no_tag=0;

	replacement_counter=0

	# Compare blocks of 20 pkgs AT ONCE against the blacklist
	# This is fast! But there should be a still better solution for
	#+ this

	mapfile -t non_free < <(for ((i=0; i<${#pkgs[*]}; i=$((i+20)))); do
		/usr/bin/grep -- "^${pkgs[$i]}:\|^${pkgs[$((i+1))]}:\|^${pkgs[$((i+2))]}:\|^${pkgs[$((i+3))]}:\|^${pkgs[$((i+4))]}:\|^${pkgs[$((i+5))]}:\|^${pkgs[$((i+6))]}:\|^${pkgs[$((i+7))]}:\|^${pkgs[$((i+8))]}:\|^${pkgs[$((i+9))]}:\|^${pkgs[$((i+10))]}:\|^${pkgs[$((i+11))]}:\|^${pkgs[$((i+12))]}:\|^${pkgs[$((i+13))]}:\|^${pkgs[$((i+14))]}:\|^${pkgs[$((i+15))]}:\|^${pkgs[$((i+16))]}:\|^${pkgs[$((i+17))]}:\|^${pkgs[$((i+18))]}:\|^${pkgs[$((i+19))]}:" \
		"$tmp_file" | /usr/bin/cut -d":" -f1
		done)

	for (( i=0; i<${#non_free[*]}; i++ )); do
		blacklist_line "${non_free[$i]}" "$((i+1))"
		free_alternative "${non_free[$i]}"
	done

	counter=$i

	if [[ $counter -eq 0 ]]; then
		echo -e "\e[1A${green}[+]$nc All your native Arch packages" \
				"are free\nRMS smiles!"
		exit $SUCCESS
	fi

	if [[ $nocolor -eq 0 ]]; then
		color_codes "$nonfree" "$semifree" "$technical" "$fix_doc" \
		"$no_desc" "$no_tag"
	fi

	echo -e "\n$nc${bold}Packages with no free/libre alternatives (yet):$nc"

	if [[ ${#no_alternative[*]} -gt 0 ]]; then

		for (( i=0; i<${#no_alternative[*]}; i++ )); do
			echo -e "$nc$bold$((i+1))$nc) ${no_alternative[$i]}"
		done

	else
		echo -e "None!"
	fi

	echo -e "\n-------------"

	total_packs="$(/usr/bin/pacman -Qqn | /usr/bin/wc -l)"

	echo -e "Total installed native packages: $total_packs"

	if [[ "$(type -P /usr/bin/bcs)" ]]; then
		echo -e "$nc${red}Non-free/libre$nc found packages:  " \
				"$counter ($(echo "scale=1;$counter*100/${#pkgs[*]}" \
				| bc)% of total packages)"

		echo -e "$nc${bold}Free/libre$nc alternatives found:  " \
		"$replacement_counter" \
		"($(echo "scale=1;$replacement_counter*100/$counter" \
		| bc)% of non-free/libre packages)"

		free_pkgs="$(echo "scale=1;(($total_packs-$counter)*100) / \
		$total_packs" | /usr/bin/bc)"

	else
		echo -e "$nc${red}Non-free/libre$nc found packages:  " \
		"$counter ($((counter*100/${#pkgs[*]}))% of total packages)"

		echo -e "$nc${bold}Free/libre$nc alternatives found:  " \
		"$replacement_counter ($((replacement_counter*100/counter))% " \
		"of non-free/libre packages)"

		free_pkgs="$(((total_packs-counter)*100/total_packs))"
	fi

	echo -e "Free/libre native Arch packages: $free_pkgs%"

#	/usr/bin/rm /tmp/official_pkgs 2>/dev/null
}

################################

check_aur ()
{
	tmp_file="/tmp/parabola_bl_aur_full"

	get_blacklist "aur"

	if [[ $full_bl -eq 0 ]]; then
		/usr/bin/grep "::::$\|:\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]\|^[^[]*$" \
		-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/parabola_bl_aur 1>/dev/null || exit $ERROR

		tmp_file="/tmp/parabola_bl_aur"
	fi

	parabola_repo_download

	echo -ne "$blue::$nc$bold Getting installed AUR packages...$nc "

	mapfile -t aur_packs < <(/usr/bin/pacman -Qqm)

	echo -e "${green}OK$nc"
	echo -e "Non-free installed AUR packages:$nc\n"

	counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0; no_tag=0;

	mapfile -t non_free < <(for (( i=0; i<${#aur_packs[*]}; i=$((i+10)) )); do
		/usr/bin/grep -- "^${aur_packs[$i]}:\|^${aur_packs[$((i+1))]}:\|^${aur_packs[$((i+2))]}:\|^${aur_packs[$((i+3))]}:\|^${aur_packs[$((i+4))]}:\|^${aur_packs[$((i+5))]}:\|^${aur_packs[$((i+6))]}:\|^${aur_packs[$((i+7))]}:\|^${aur_packs[$((i+8))]}:\|^${aur_packs[$((i+9))]}:" \
		"$tmp_file" | /usr/bin/cut -d':' -f1; done )

	for (( i=0; i<${#non_free[*]}; i++ )); do
		blacklist_line "${non_free[$i]}" "$((i+1))"
       	free_alternative "${non_free[$i]}"
	done

	counter="$i"

	if [[ $counter -eq 0 ]]; then
		echo -e "\e[1A${green}[+]$nc None! All your AUR packages are" \
				"free!"
		exit $SUCCESS
	fi

	if [[ $nocolor -eq 0 ]]; then
		color_codes "$nonfree" "$semifree" "$technical" "$fix_doc" "$no_desc" "$no_tag"
	fi

	echo -e "\n-------------"
	echo -e "Total installed AUR packages:  ${#aur_packs[*]}"
	echo -e "${red}Non-free/libre$nc found packages: $counter"
}

################################

check_repo ()
{
	if [[ -z $1 ]]; then
		echoerr "${ME,,}: You must specify a repository\nUsage: ${ME,,} -r" \
				"REPOSITORY\n"
		exit $ERROR
	fi

	mapfile -t repos < <(/usr/bin/grep "^\[" /etc/pacman.conf \
	| /usr/bin/grep -v options | /usr/bin/tr -d '[],')

	local repo=${1,,} repo_found=0

	for i in ${repos[*]}; do
		if [[ $i == "$repo" ]]; then
			repo_found=1
			break;
		fi
	done

	if [[ $repo_found -eq 0 ]]; then
		echoerr "${ME,,}: '$repo': No such repository"
		exit $ERROR
	fi

	unset repos

	if [[ $repo == "libre" ]]; then
		echo -e "The [$repo] repository is supposed to be free from" \
				"non-free software!\n\n$nc${bold}NOTE$nc: Since many" \
				"packages in the [$repo] repo have the same name as those" \
				"in the official repos, running this test upon the " \
				"[$repo] repo itself will be riddled with false" \
				"positives."
		exit $SUCCESS
	fi

	mapfile -t pkgs < <(/usr/bin/pacman -Sql -- "$repo")

	tmp_file="/tmp/parabola_bl_official_full"

	get_blacklist

	if [[ $full_bl -eq 0 ]]; then
		# By default, remove all branding and merely technical
		#+ non-free packs
		/usr/bin/grep ":\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]\|^[^[]*$" \
		-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/parabola_bl_official 1>/dev/null || exit $ERROR

		tmp_file="/tmp/parabola_bl_official"
	fi

	parabola_repo_download

	echo -e "Non-free packages in repository $nc${bold}[$repo]$nc:\n"

	nonfree_counter=0; alt_counter=0
	fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0; no_tag=0;

	for (( i=0; i<${#pkgs[*]}; i=$((i+20)) )); do
		/usr/bin/grep -- "^${pkgs[$i]}:\|^${pkgs[$((i+1))]}:\|^${pkgs[$((i+2))]}:\|^${pkgs[$((i+3))]}:\|^${pkgs[$((i+4))]}:\|^${pkgs[$((i+5))]}:\|^${pkgs[$((i+6))]}:\|^${pkgs[$((i+7))]}:\|^${pkgs[$((i+8))]}:\|^${pkgs[$((i+9))]}:\|^${pkgs[$((i+10))]}:\|^${pkgs[$((i+11))]}:\|^${pkgs[$((i+12))]}:\|^${pkgs[$((i+13))]}:\|^${pkgs[$((i+14))]}:\|^${pkgs[$((i+15))]}:\|^${pkgs[$((i+16))]}:\|^${pkgs[$((i+17))]}:\|^${pkgs[$((i+18))]}:\|^${pkgs[$((i+19))]}:" "$tmp_file"
	done > /tmp/non_free_repo

	OIFS=$IFS
	IFS=":"

	while read -r line; do
		read -r pkg alt ref id desc <<< "$line"

		blacklist_line "$pkg" "$((nonfree_counter+1))"

		alt="$(extra_alternatives "$pkg")"

		if [[ -n $alt ]]; then

			(( alt_counter++ ))
			alt_version="$(/usr/bin/grep -Ee "^${alt}-[0-9]" \
			/tmp/libre_repo_pkgs)"

			if [[ -n $alt_version ]]; then
				echo -e "$nc$bold   Free alternative:$nc $alt_version"
			else
				echo -e "$nc$bold   Free alternative:$nc $alt"
			fi

		else
			no_alternative[${#no_alternative[*]}]="$pkg"
		fi

		(( nonfree_counter++ ))
	done < "/tmp/non_free_repo"

	/usr/bin/rm /tmp/non_free_repo

	IFS=$OIFS

	if [[ $nonfree_counter -eq 0 ]]; then
		echo -e "${green}[+]$nc [${repo,,}] is free from non-free" \
				"software!"
		exit $SUCCESS
	fi

	if [[ $nocolor -eq 0 ]]; then
		color_codes "$nonfree" "$semifree" "$technical" "$fix_doc" "$no_desc" "$no_tag"
	fi

	echo -e "\nPackages with no free alternatives (yet):"

	for (( i=0; i<${#no_alternative[*]}; i++ )); do
		echo -e "$nc$bold$((i+1))$nc) ${no_alternative[$i]}"
	done

	echo -e "\n-------------"

	echo -e "$nc${bold}[${repo,,}]$nc\n$nonfree_counter/$(/usr/bin/pacman \
	-Sl "$repo" | /usr/bin/wc -l) packages are non-free."

	echo -e "$alt_counter/$nonfree_counter non-free" \
			"packages have a free alternative."

#	/usr/bin/rm -f /tmp/libre.db
#	/usr/bin/rm -rf /tmp/libre
}

################################

check_privacy ()
{
	tmp_file="/tmp/parabola_bl_privacy"

	get_blacklist "privacy"
	parabola_repo_download

	echo -ne "$blue::$nc$bold Getting installed packages...$nc "

	local pkgs=() nonpriv=()

	mapfile -t pkgs < <(/usr/bin/pacman -Qq)

	echo -e "${green}OK$nc"
	echo -e "Non-secure packages installed in your system:$nc\n"

	counter=0; fix_doc=0; nonfree=0; semifree=0; technical=0; no_desc=0
	no_tag=0;

	mapfile -t nonpriv < <(for ((i=0; i<${#pkgs[*]}; i=$((i+20)))); do
		/usr/bin/grep -- "^${pkgs[$i]}:\|^${pkgs[$((i+1))]}:\|^${pkgs[$((i+2))]}:\|^${pkgs[$((i+3))]}:\|^${pkgs[$((i+4))]}:\|^${pkgs[$((i+5))]}:\|^${pkgs[$((i+6))]}:\|^${pkgs[$((i+7))]}:\|^${pkgs[$((i+8))]}:\|^${pkgs[$((i+9))]}:\|^${pkgs[$((i+10))]}:\|^${pkgs[$((i+11))]}:\|^${pkgs[$((i+12))]}:\|^${pkgs[$((i+13))]}:\|^${pkgs[$((i+14))]}:\|^${pkgs[$((i+15))]}:\|^${pkgs[$((i+16))]}:\|^${pkgs[$((i+17))]}:\|^${pkgs[$((i+18))]}:\|^${pkgs[$((i+19))]}:" \
		"$tmp_file" | /usr/bin/awk -F':' '{print $1}'
		done)

	for (( i=0; i<${#nonpriv[*]}; i++ )); do
#		if blacklist_line "${nonpriv[$i]}" "$((i+1))" -ne -1; then
			blacklist_line "${nonpriv[$i]}" "$((i+1))"
			free_alternative "${nonpriv[$i]}"
			(( counter++ ))
#		fi
	done

	if [[ $counter -eq 0 ]]; then
		echo -e "\e[1A${green}[+]$nc None! You're free from privacy" \
				"risking packages!"
		exit $SUCCESS
	fi

	if [[ $nocolor -eq 0 ]]; then
		color_codes "$nonfree" "$semifree" "$technical" "$fix_doc" "$no_desc" "$no_tag"
	fi

	echo -e "\n-------------"
	echo -e "${red}[-]$nc ${counter}/$(/usr/bin/pacman -Q | /usr/bin/wc -l)" \
			"packages might be compromizing your privacy."

	echo -e "\n${bold}NOTE$nc: Suggested alternatives come from Parabola libre repositories"
}

################################

check_init ()
{
	echo -ne "$blue::$nc$bold Checking init system...$nc "

	pid1="$(/usr/bin/realpath -- "$(/usr/bin/tr -d '\0' < /proc/1/cmdline)")"

	local init="${pid1##*/}"

	case $init in
		'') echo -e "Unknown" ;;

		systemd) echo -e "$red$init$nc" ;;

		*) echo -e "$nc$init" ;;
	esac

	echo -e "$blue::$nc$bold Looking for systemd packages...$nc"

	unset sysd_pkgs

	if [[ "$(/usr/bin/pacman -Qq systemd-libs)" == "systemd-libs" ]]; then
		sysd_pkgs[0]="systemd-libs"
	fi

	for inst_pkg in /var/lib/pacman/local/*; do

		[[ $inst_pkg == *"ALPM_DB_VERSION"* ]] && continue

		local dep=0

		while read -r line; do
			[[ $line == "%DEPENDS%" ]] && dep=1

			if [[ $dep -eq 1 ]]; then
				case $line in

					systemd|systemd-libs)
						# Store directory basename
						sysd_pkgs[${#sysd_pkgs[*]}]="${inst_pkg##*/}"
						break
					;;

					'') break ;;
				esac
			fi

		done < "$inst_pkg/desc"

	done

	if [[ ${#sysd_pkgs[*]} -gt 0 ]]; then
		echo -e "$red"

		for i in ${sysd_pkgs[*]}; do
			# Remove version from directory basename
			echo "${i%%-[0-9]*}"
		done

		echo -e "\n$nc${bold}Total systemd packages: ${#sysd_pkgs[*]}$nc"
	else
		echo -e "${green}[+]$nc You are systemd-free!"
	fi
}

################################

list_systemd ()
{
	local repos=() sysd_all=()
	mapfile -t repos < <(/usr/bin/grep "^\[" /etc/pacman.conf \
	| /usr/bin/grep -v options | /usr/bin/tr -d '[]')

	echo -e "$blue::$nc$bold Getting enabled repositories...$nc" \
			"\n${repos[*]}"
	echo -e "$blue::$nc$bold Getting systemd packages...$nc "

	mapfile -t sysd_all < <(/usr/bin/pacman -Sii systemd systemd-libs \
	| /usr/bin/grep "Required By" | /usr/bin/cut -d":" -f2)

	for i in ${sysd_all[*]}; do
		echo "$i"
	done | /usr/bin/sort -u

	echo -e "\nTotal systemd packages: ${#sysd_all[*]}"
}

################################

list_official ()
{
	tmp_file="/tmp/parabola_bl_official_full"

	get_blacklist

	if [[ $full_bl -eq 0 ]]; then
		# By default, remove all branding and merely technical
		#+ non-free packs
		/usr/bin/grep ":\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]" \
		-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/parabola_bl_official 1>/dev/null || exit $ERROR

		tmp_file="/tmp/parabola_bl_official"
	fi

	parabola_repo_download

	echo -e "Non-free/libre Arch official packages:\n"

	local counter=0

	while IFS=':' read -r pkg alt ref id desc; do
		echo -e "$yellow$((counter+1))$nc) $cyan$pkg: $nc$desc"

		if [[ -n $alt ]]; then
			echo -e "$nc${bold}Free alternative:$nc $alt"
		fi

		counter=$((counter+1))
	done < "$tmp_file"

	if [[ $nocolor -eq 0 ]]; then
		echo -e "\n$nc${bold}Color codes:$nc" \
				"\n${cyan}Cyan:$nc non-free package" \
				"\n${magenta}Magenta:$nc free alternative available" \
				"in Parabola's [libre] repository" \
				"\n${d_yellow}Yellow:$nc free alternative only" \
				"suggested, NOT available in Parabola's [libre] repository"
	fi
}

################################

list_aur ()
{
	tmp_file="/tmp/parabola_bl_aur_full"

	get_blacklist "aur"

	if [[ $full_bl -eq 0 ]]; then
		# By default, remove all branding and merely technical
		#+ non-free packs
		/usr/bin/grep "::::$\|:\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]" \
		-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
		/tmp/parabola_bl_aur 1>/dev/null || exit $ERROR

		tmp_file="/tmp/parabola_bl_aur"
	fi

	parabola_repo_download

	echo -e "Non-free/libre AUR packages:\n"

	local counter=0

	while IFS=':' read -r pkg alt ref id desc; do
		echo -e "$yellow$((counter+1))$nc) $cyan$pkg: $nc$desc"

		if [[ -n $alt ]]; then
			echo -e "$nc${bold}Free alternative: $blue$alt$nc"
		fi

		(( counter++ ))
	done < "$tmp_file"

	if [[ $nocolor -eq 0 ]]; then
		echo -e "\n$nc${bold}Color codes:$nc" \
				"\n${cyan}Cyan:$nc non-free package" \
				"\n${magenta}Magenta:$nc free alternative available" \
				"in Parabola's [libre] repository" \
				"\n${d_yellow}Yellow:$nc free alternative only" \
				"suggested, NOT available in Parabola's [libre] repository"
	fi
}

################################

list_privacy ()
{
	tmp_file="/tmp/parabola_bl_privacy"

	get_blacklist "privacy"

	parabola_repo_download

	echo -e "Privacy threatening software:\n"

	local counter=0


	while IFS=':' read -r pkg alt ref id desc; do
		echo -e "$yellow$((counter+1))$nc) $pkg: $desc"

		if [[ -n $alt ]]; then
			echo -e "$nc${bold}Secure alternative: $alt"
		fi

		(( counter++ ))
	done < "$tmp_file"

	if [[ $nocolor -eq 0 ]]; then
		echo -e "\n$nc${bold}Color codes:$nc" \
				"\n${cyan}Cyan:$nc non-free package" \
				"\n${magenta}Magenta:$nc free alternative" \
				"available in Parabola's [libre] repository" \
				"\n${d_yellow}Yellow:$nc free alternative only" \
				"suggested, NOT available in Parabola's [libre] repository"
	fi
}

################################

check_pkg ()
{
	local packs=( "$@" ) replacement_counter=0

	for pack in ${packs[*]}; do

		[[ $pack == "-"* ]] && return

		replacement_counter=0

		# Check official repositories

		echo -ne "$blue::$nc$bold Cheking enabled official repositories...$nc "

		# Official repos: core extra community multilib testing
		#+ community-testing multilib-testing gnome-unstable kde-unstable
		# This condition only checks locally enabled repos!!
		if /usr/bin/pacman -Ss -- "^$pack$" \
		| /usr/bin/grep -q ^"core\|extra\|community\|multilib\|testing\|community-testing\|multilib-testing\|gnome-unstable\|kde-unstable"/ ; then
			echo "Found"

			tmp_file="/tmp/parabola_bl_official_full"

			get_blacklist

			if [[ $full_bl -eq 0 ]]; then

				/usr/bin/grep ":\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]\|^[^[]*$" \
				-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
				/tmp/parabola_bl_official 1>/dev/null

				tmp_file="/tmp/parabola_bl_official"
			fi

		# Check the AUR
		# NOTE: The following curl line is able to found AUR packages
		#+ hidden from the AUR web interface!! Example: your-freedom
		else
			echo "Not found"
			echo -ne "$blue::$nc$bold Checking the AUR...$nc "

			if /usr/bin/curl --output /dev/null --silent --head --fail \
			https://aur.archlinux.org/cgit/aur.git/snapshot/"$pack".tar.gz; then
				echo "Found"

				tmp_file="/tmp/parabola_bl_aur_full"

				get_blacklist "aur"

				if [[ $full_bl -eq 0 ]]; then

					/usr/bin/grep "::::$\|:\[semifree\]\|:\[nonfree\]\|:\[uses-nonfree\]" \
					-- "$tmp_file" | /usr/bin/sudo -u "$user" /usr/bin/tee \
					/tmp/parabola_bl_aur 1>/dev/null

					tmp_file="/tmp/parabola_bl_aur"
				fi

			else
				echo "Not found"
				exit $ERROR
			fi
		fi

		parabola_repo_download

		local OIFS=$IFS
		IFS=':'
		read -r pkg alt ref id desc < <(/usr/bin/grep -m1 ^"$pack": \
		"$tmp_file")
		IFS=$OIFS

		if [[ -n $pkg ]]; then
			echo -ne "$nc$bold$pack$nc is a ${red}non-free$nc package\n" \
					 "  Description:$nc "

			if [[ $nocolor -eq 0 ]]; then
				export GREP_COLORS="mt=1;36"

				if [[ -n $desc ]]; then
					if ! echo "$desc" \
					| /usr/bin/grep --color=always "\[technical\]\|\[branding\]\|\[nonfree\]\|\[semifree\]\|\[uses-nonfree\]\|\[recommends-nonfree\]\|\[FIXME:description\]\|\[FIXME:package\]"; then
						echo "$desc"
					fi
				else
					echo "None"
				fi

				unset GREP_COLORS
			else
				echo "$desc"
			fi

			free_alternative "$pkg"

			if [[ $replacement_counter -eq 0 ]]; then
				echo -e "   No free/libre alternative for this package (yet)."
			fi

		else
			echo -e "$nc$bold$pack$nc is ${green}not blacklisted$nc"
		fi
	done

#	/usr/bin/rm -f /tmp/libre.db
#	/usr/bin/rm -rf /tmp/libre
}

##############################################################################

						#####################
						#       MAIN        #
						#####################

##############################################################################

main ()
{
	full_bl=0; nocolor=1 #; tab=""

	if [[ $# -eq 0 || $1 == "--help" || $1 == "help" ]]; then
		show_help
		exit $SUCCESS
	fi

	if ! [[ "$(type -P /usr/bin/pacman)" ]]; then
		echoerr "${ME,,}: 'pacman': Command not found"
		exit $ERROR
	fi

	[[ $SUDO_USER ]] && user=$SUDO_USER || user=$USER

	while getopts ":acdfhilmnpr:s:tvx" opt; do

		case $opt in
			a) check_aur ;;
			c)
				nocolor=0 #; tab="\t"
				white="\033[1;37m"; red="\033[1;31m"
				yellow="\033[1;33m"; green="\033[1;32m"
				cyan="\033[1;36m"; blue="\033[1;34m"
				magenta="\033[1;35m"; d_yellow="\033[0;33m"
				nc="\033[0m"; bold="\033[1m"
			;;
			d) list_systemd ;;
			f) free_soft ;;
			h) show_help ;;
			i) check_init ;;
			l) list_official ;;
			m) list_aur ;;
			n) check_native ;;
			p) check_privacy ;;
			r) check_repo "$OPTARG" ;;
			s)
				# $OPTARG contains only one argument, the first, passed
				#+ to the corresponding option, here -s. However, since
				#+ we need to check here multiple arguments, we move on
				#+ to the next argument (with shift), and then pass
				#+ everything else to our function.
				shift
				check_pkg "$@" ;;
			t) full_bl=1 ;;
			v) show_version ;;
			x) list_privacy ;;
			\?) echoerr "${ME,,}: invalid option -- '$OPTARG'\nTry" \
						"'${ME,,} -h' for more information"
			;;
			:) echoerr "${ME,,}: option requires an argument -- " \
						"'$OPTARG'\nTry '${ME,,} -h' for more information"
			;;
		esac
	done

	if [[ -f /tmp/libre.db ]]; then
		/usr/bin/rm -f /tmp/libre.db || exit $ERROR
	fi

	if [[ -d /tmp/libre ]]; then
		/usr/bin/rm -rf /tmp/libre || exit $ERROR
	fi
}

################################

main "$@"

exit $SUCCESS
